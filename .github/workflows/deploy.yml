name: Deploy Website

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '22'
  
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  # Check what changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      terraform: ${{ steps.changes.outputs.terraform }}
      react: ${{ steps.changes.outputs.react }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            terraform:
              - 'terraform/**'
              - '.github/workflows/deploy.yml'
            react:
              - 'client/src/**'
              - 'client/public/**'
              - 'package.json'
              - 'package-lock.json'

  # Deploy infrastructure changes
  terraform:
    needs: changes
    if: needs.changes.outputs.terraform == 'true'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: terraform
        
    outputs:
      s3_bucket: ${{ steps.output.outputs.s3_bucket }}
      cloudfront_id: ${{ steps.output.outputs.cloudfront_id }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::985539757575:role/GitHub-OIDC-TerraformRole
          role-session-name: terraform-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan üìñ
            
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        if: github.ref == 'refs/heads/main'
        id: output
        run: |
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

  # Build and deploy React app
  deploy-app:
    needs: [changes, terraform]
    if: always() && (needs.changes.outputs.react == 'true' || needs.terraform.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build React App
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::985539757575:role/GitHub-OIDC-TerraformRole
          role-session-name: app-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Infrastructure Info
        id: infra
        run: |
          if [ "${{ needs.terraform.outputs.s3_bucket }}" != "" ]; then
            echo "s3_bucket=${{ needs.terraform.outputs.s3_bucket }}" >> $GITHUB_OUTPUT
            echo "cloudfront_id=${{ needs.terraform.outputs.cloudfront_id }}" >> $GITHUB_OUTPUT
          else
            # Get from existing terraform state if infrastructure didn't change
            cd terraform
            terraform init
            echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
            echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to S3
        run: |
          aws s3 sync build/ s3://${{ steps.infra.outputs.s3_bucket }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.infra.outputs.cloudfront_id }} \
            --paths "/*"

      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment Complete!"
          echo "üì¶ S3 Bucket: ${{ steps.infra.outputs.s3_bucket }}"
          echo "üåê CloudFront: ${{ steps.infra.outputs.cloudfront_id }}"